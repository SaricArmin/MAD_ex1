/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien
import kotlin.random.Random
import kotlin.random.nextInt


class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val randomNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        var userGuess: Int
        var result: CompareResult
        do {
            println("guess the 4 digit number: ")
            userGuess = readln().toInt()
            result = checkUserInputAgainstGeneratedNumber(userGuess, randomNumber)
            println(result)
            println("das result rn: " + result.m)
        } while (result.m != digitsToGuess)

        println("gz, $randomNumber")
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        require(length in 1..9) { "number can be only 1-9" } // throws the illegalargumentexception
        val digits = (1..9).shuffled().take(length).joinToString("")
        digits.toInt()
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        val input_str = input.toString()
        val generated_str = generatedNumber.toString()

        if (input_str.length != generated_str.length) {
            throw IllegalArgumentException("not same length of both strings")
        }
        var correct_pos = 0
        var correct_dig = 0
        val seen = mutableSetOf<Char>()
        for (i in input_str.indices) {
            if (input_str[i] == generated_str[i]) correct_pos++
            if (input_str[i] in generated_str && input_str[i] !in seen) {
                correct_dig++
                seen.add(input_str[i])
            }
        }
        CompareResult(correct_dig, correct_pos)
    }
}

fun main() {
    val app = App()
    println(app.checkUserInputAgainstGeneratedNumber(1234, 1567)) // Output: 1:1
    println(app.checkUserInputAgainstGeneratedNumber(1234, 4321)) // Output: 4:0
    println(app.checkUserInputAgainstGeneratedNumber(1234, 5678)) // Output: 0:0
    println(app.checkUserInputAgainstGeneratedNumber(1234, 1234)) // Output: 4:4
    app.playNumberGame()
}